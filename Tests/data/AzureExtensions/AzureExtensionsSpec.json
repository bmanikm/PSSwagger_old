{
    "swagger": "2.0",
    "info": {
        "title": "AzureExtensions",
        "description": "API that tests known AutoRest Azure extensions",
        "version": "2017-03-30"
    },
    "host": "localhost:3000",
    "schemes": [
        "http"
    ],
    "basePath": "/",
    "produces": [
        "application/json"
    ],
    "paths": {
        "/cupcakes": {
            "get": {
                "summary": "Get all cupcakes",
                "operationId": "Cupcake_List",
                "description": "List all cupcakes.",
                "parameters": [],
                "tags": [
                    "Cupcakes"
                ],
                "responses": {
                    "200": {
                        "description": "All cupcake entities.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Cupcake"
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Create cupcake",
                "operationId": "Cupcake_Create",
                "description": "Create a cupcake.",
                "parameters": [
                    {
                        "name": "cupcake",
                        "in": "body",
                        "description": "x-ms-client-flatten on parameter test",
                        "x-ms-client-flatten": true,
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Cupcake"
                        }
                    }
                ],
                "tags": [
                    "Cupcakes"
                ],
                "responses": {
                    "201": {
                        "description": "Created cupcake",
                        "schema": {
                            "$ref": "#/definitions/Cupcake"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/cupcakeBatches": {
            "get": {
                "summary": "Get all cupcake batches",
                "operationId": "CupcakeBatch_List",
                "description": "List all cupcake batches.",
                "parameters": [],
                "tags": [
                    "CupcakeBatch"
                ],
                "responses": {
                    "200": {
                        "description": "All cupcake batch entities.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CupcakeBatch"
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Create cupcake batch",
                "operationId": "CupcakeBatch_Create",
                "description": "Create a cupcake batch.",
                "parameters": [
                    {
                        "name": "CupcakeBatch",
                        "in": "body",
                        "description": "x-ms-client-flatten on parameter test",
                        "x-ms-client-flatten": true,
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CupcakeBatch"
                        }
                    }
                ],
                "tags": [
                    "CupcakeBatch"
                ],
                "responses": {
                    "201": {
                        "description": "Created cupcake batch",
                        "schema": {
                            "$ref": "#/definitions/CupcakeBatch"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/groupTests/{pathParameter}": {
            "get": {
                "summary": "Test path parameter group",
                "operationId": "GroupTests_PathParameter",
                "description": "Test path parameter group",
                "parameters": [
                    {
                        "name": "parm",
                        "in": "path",
                        "description": "x-ms-parameter-grouping test",
                        "required": true,
                        "type": "string",
                        "x-ms-parameter-grouping": {
                            "name": "my-test.GrouP"
                        }
                    },
                    {
                        "name": "parm2",
                        "in": "query",
                        "description": "x-ms-parameter-grouping test",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Cupcake"
                ],
                "responses": {
                    "200": {
                        "description": "Results",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Cupcake"
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/groupTests/localAndGlobal": {
            "get": {
                "summary": "Test local/global parameter group",
                "operationId": "GroupTest_MixedParameter",
                "description": "Test local/global parameter group",
                "parameters": [
                    {
                        "name": "parm",
                        "in": "path",
                        "description": "x-ms-parameter-grouping test",
                        "required": true,
                        "type": "string",
                        "x-ms-parameter-grouping": {
                            "name": "my-test.GrouP2"
                        }
                    },
                    {
                        "$ref": "#/parameters/GlobalParameter"
                    }
                ],
                "tags": [
                    "Cupcake"
                ],
                "responses": {
                    "200": {
                        "description": "Results",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Cupcake"
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/virtualMachines": {
            "put": {
                "summary": "Create or update VM",
                "operationId": "VirtualMachine_CreateOrUpdate",
                "description": "Create or update VM.",
                "parameters": [
                    {
                        "name": "virtualMachine",
                        "in": "body",
                        "description": "long running operation test",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VirtualMachine"
                        }
                    }
                ],
                "tags": [
                    "VirtualMachines"
                ],
                "responses": {
                    "201": {
                        "description": "Created VM",
                        "schema": {
                            "$ref": "#/definitions/VirtualMachine"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "x-ms-long-running-operation": true
            }
        },
        "/groupTests/postfixTest": {
            "get": {
                "summary": "Test postfix parameter group",
                "operationId": "GroupTests_PostfixTest",
                "description": "Test postfix parameter group",
                "parameters": [
                    {
                        "name": "parm",
                        "in": "query",
                        "description": "x-ms-parameter-grouping test",
                        "required": true,
                        "type": "string",
                        "x-ms-parameter-grouping": {
                            "postfix": "Contoso"
                        }
                    }
                ],
                "tags": [
                    "Cupcake"
                ],
                "responses": {
                    "200": {
                        "description": "Results",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Cupcake"
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/groupTests/noPostfixTest": {
            "get": {
                "summary": "Test postfix parameter group",
                "operationId": "GroupTests_NoPostfixTest",
                "description": "Test postfix parameter group",
                "parameters": [
                    {
                        "name": "parm",
                        "in": "query",
                        "description": "x-ms-parameter-grouping test",
                        "required": true,
                        "type": "string",
                        "x-ms-parameter-grouping": {}
                    }
                ],
                "tags": [
                    "Cupcake"
                ],
                "responses": {
                    "200": {
                        "description": "Results",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Cupcake"
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/groupTests/noHyphen": {
            "get": {
                "summary": "Test postfix parameter group",
                "operationId": "GroupTestsNoHyphen",
                "description": "Test postfix parameter group",
                "parameters": [
                    {
                        "name": "parm",
                        "in": "query",
                        "description": "x-ms-parameter-grouping test",
                        "required": true,
                        "type": "string",
                        "x-ms-parameter-grouping": {}
                    }
                ],
                "tags": [
                    "Cupcake"
                ],
                "responses": {
                    "200": {
                        "description": "Results",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Cupcake"
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/groupTests/flattened": {
            "post": {
                "summary": "Test flattened parameter group",
                "operationId": "GroupTests_FlattenedParms",
                "description": "Test flattened parameter group",
                "parameters": [
                    {
                        "name": "parm",
                        "in": "body",
                        "description": "x-ms-parameter-grouping test",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CupcakeBatch"
                        },
                        "x-ms-client-flatten": true,
                        "x-ms-parameter-grouping": {
                            "name": "flattened-group"
                        }
                    }
                ],
                "tags": [
                    "Cupcake"
                ],
                "responses": {}
            }
        },
        "/groupTests/multipleGroups": {
            "get": {
                "summary": "Test multiple parameter group",
                "operationId": "GroupTests_MultipleGroups",
                "description": "Test multiple parameter group",
                "parameters": [
                    {
                        "name": "parm",
                        "in": "query",
                        "description": "x-ms-parameter-grouping test",
                        "required": true,
                        "type": "string",
                        "x-ms-parameter-grouping": {
                            "name": "group-a"
                        }
                    },
                    {
                        "name": "parm2",
                        "in": "query",
                        "description": "x-ms-parameter-grouping test",
                        "required": true,
                        "type": "string",
                        "x-ms-parameter-grouping": {
                            "name": "group-b"
                        }
                    }
                ],
                "tags": [
                    "Cupcake"
                ],
                "responses": {
                    "200": {
                        "description": "Results",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Cupcake"
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "x-ms-paths": {
        "/cupcakes?id={id}": {
            "get": {
                "summary": "Get a cupcake",
                "operationId": "Cupcake_GetById",
                "description": "Get a cupcake.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "x-ms-paths test",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Cupcakes"
                ],
                "responses": {
                    "200": {
                        "description": "All cupcake entities.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Cupcake"
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/cupcakes?flavor={flavor}": {
            "get": {
                "summary": "Get a cupcake",
                "operationId": "Cupcake_GetByFlavor",
                "description": "Get a cupcake.",
                "parameters": [
                    {
                        "name": "flavor",
                        "in": "query",
                        "description": "x-ms-paths test",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Cupcakes"
                ],
                "responses": {
                    "200": {
                        "description": "All cupcake entities.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Cupcake"
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.Search/checkNameAvailability": {
            "post": {
                "tags": [
                    "Services"
                ],
                "description": "Checks whether or not the given Search service name is available for use. Search service names must be globally unique since they are part of the service URI (https://<name>.search.windows.net).",
                "externalDocs": {
                    "url": "https://aka.ms/search-manage"
                },
                "operationId": "Services_CheckNameAvailability",
                "parameters": [
                    {
                        "name": "checkNameAvailabilityInput",
                        "in": "body",
                        "description": "The resource name and type to check.",
                        "x-ms-client-flatten": true,
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CheckNameAvailabilityInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The name check completed. The response contains details of whether the name is valid and available. If the name is invalid, the response also contains a message explaining why not.",
                        "schema": {
                            "$ref": "#/definitions/CheckNameAvailabilityOutput"
                        },
                        "examples": {
                            "application/json": {
                                "nameAvailable": false,
                                "reason": "AlreadyExists",
                                "message": ""
                            }
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}": {
            "put": {
                "tags": [
                    "Services"
                ],
                "operationId": "SearchServices_CreateOrUpdate",
                "description": "Creates or updates a Search service in the given resource group. If the Search service already exists, all properties will be updated with the given values.",
                "externalDocs": {
                    "url": "https://aka.ms/search-manage"
                },
                "parameters": [
                    {
                        "name": "searchServiceName",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "The name of the Azure Search service to create or update. Search service names must only contain lowercase letters, digits or dashes, cannot use dash as the first two or last one characters, cannot contain consecutive dashes, and must be between 2 and 60 characters in length. Search service names must be globally unique since they are part of the service URI (https://<name>.search.windows.net). You cannot change the service name after the service is created."
                    },
                    {
                        "name": "service",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SearchService"
                        },
                        "description": "The definition of the Search service to create or update."
                    },
                    {
                        "name": "port",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Port"
                        },
                        "description": "port parameter description."
                    },
                    {
                        "name": "IotHubProperties",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IotHubProperties"
                        },
                        "description": "IotHubProperties parameter description."
                    },
                    {
                        "name": "SkuOnPath",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Sku"
                        },
                        "description": "The SKU of the Search Service, which determines price tier and capacity limits."
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    },
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The existing service definition was successfully updated. If you changed the number of replicas or partitions, the scale operation will happen asynchronously. You can periodically get your service definition and monitor progress via the provisioningState property.",
                        "schema": {
                            "$ref": "#/definitions/SearchService"
                        }
                    },
                    "201": {
                        "description": "If you requested creation of a free Search service, the service is now provisioned and ready to use, subject to DNS propagation delay. For other SKU types, provisioning happens asynchronously. You can periodically get your service definition and monitor progress via the provisioningState property.",
                        "schema": {
                            "$ref": "#/definitions/SearchService"
                        }
                    },
                    "default": {
                        "description": "HTTP 400 (Bad Request): The given service name or service definition is invalid; See the error code and message in the response for details. HTTP 404 (Not Found): The subscription or resource group could not be found. HTTP 409 (Conflict): The specified subscription is disabled.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "CupcakeBatch": {
            "type": "object",
            "properties": {
                "properties": {
                    "x-ms-client-flatten": true,
                    "$ref": "#/definitions/Cupcake"
                }
            }
        },
        "Cupcake": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "flavor": {
                    "type": "string",
                    "description": "Flavor"
                }
            }
        },
        "VirtualMachine": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "sku": {
                    "x-ms-client-name": "ClientNameForSku",
                    "type": "string",
                    "description": "SKU"
                }
            }
        },
        "CheckNameAvailabilityInput": {
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "name": {
                    "description": "The Search service name to validate. Search service names must only contain lowercase letters, digits or dashes, cannot use dash as the first two or last one characters, cannot contain consecutive dashes, and must be between 2 and 60 characters in length.",
                    "type": "string"
                },
                "type": {
                    "description": "The type of the resource whose name is to be validated. This value must always be 'searchServices'.",
                    "type": "string",
                    "enum": [
                        "searchServices"
                    ],
                    "x-ms-enum": {
                        "name": "ResourceType",
                        "modelAsString": false
                    }
                }
            },
            "description": "Input of check name availability API.",
            "example": {
                "name": "your-service-name-here",
                "type": "searchServices"
            }
        },
        "CheckNameAvailabilityOutput": {
            "type": "object",
            "properties": {
                "nameAvailable": {
                    "x-ms-client-name": "IsNameAvailable",
                    "description": "A value indicating whether the name is available.",
                    "type": "boolean",
                    "readOnly": true
                },
                "reason": {
                    "description": "The reason why the name is not available. 'Invalid' indicates the name provided does not match the naming requirements (incorrect length, unsupported characters, etc.). 'AlreadyExists' indicates that the name is already in use and is therefore unavailable.",
                    "type": "string",
                    "readOnly": true,
                    "enum": [
                        "Invalid",
                        "AlreadyExists"
                    ],
                    "x-ms-enum": {
                        "name": "UnavailableNameReason",
                        "modelAsString": true
                    }
                },
                "message": {
                    "description": "A message that explains why the name is invalid and provides resource naming requirements. Available only if 'Invalid' is returned in the 'reason' property.",
                    "type": "string",
                    "readOnly": true
                }
            },
            "description": "Output of check name availability API."
        },
        "OperationsMonitoringProperties": {
            "description": "The operations monitoring properties for the IoT hub. The possible keys to the dictionary are Connections, DeviceTelemetry, C2DCommands, DeviceIdentityOperations, FileUploadOperations.",
            "type": "object",
            "properties": {
                "events": {
                    "type": "object",
                    "additionalProperties": {
                        "enum": [
                            "None",
                            "Error",
                            "Information",
                            "Error, Information"
                        ],
                        "description": "The operations monitoring level.",
                        "type": "string",
                        "x-ms-enum": {
                            "name": "OperationMonitoringLevel",
                            "modelAsString": true
                        }
                    }
                },
                "events2": {
                    "type": "object",
                    "additionalProperties": {
                        "enum": [
                            "None",
                            "Error",
                            "Information",
                            "Error, Information"
                        ],
                        "description": "The operations monitoring level.",
                        "type": "string",
                        "x-ms-enum": {
                            "name": "OperationMonitoringLevel2",
                            "modelAsString": false
                        }
                    }
                }
            }
        },
        "IotHubProperties": {
            "description": "The properties of an IoT hub.",
            "type": "object",
            "properties": {
                "provisioningState": {
                    "description": "The provisioning state.",
                    "type": "string",
                    "readOnly": true
                },
                "hostName": {
                    "description": "The name of the host.",
                    "type": "string",
                    "readOnly": true
                },
                "enableFileUploadNotifications": {
                    "description": "If True, file upload notifications are enabled.",
                    "type": "boolean"
                },
                "comments": {
                    "description": "Comments.",
                    "type": "string"
                },
                "operationsMonitoringProperties": {
                    "$ref": "#/definitions/OperationsMonitoringProperties"
                },
                "features": {
                    "description": "The capabilities and features enabled for the IoT hub.",
                    "enum": [
                        "None",
                        "DeviceManagement"
                    ],
                    "type": "string",
                    "x-ms-enum": {
                        "name": "Capabilities",
                        "modelAsString": true
                    }
                }
            }
        },
        "MonitoringState": {
            "description": "Used to specify if a resources is monitored or discovered.",
            "type": "string",
            "enum": [
                "monitored",
                "discovered"
            ],
            "x-ms-enum": {
                "name": "MonitoringState",
                "modelAsString": false
            }
        },
        "Port": {
            "description": "A port resource represents a server port on a machine. The port may be actively *monitored*, i.e., a Dependency Agent is running on its machine, or *discovered*, i.e., its existence was inferred by observing the data stream from monitored machines. A port is live during an interval of time, if that port had associated activity during (parts) of that interval.",
            "x-ms-discriminator-value": "port",
            "properties": {
                "properties": {
                    "x-ms-client-flatten": true,
                    "type": "object",
                    "description": "Resource properties.",
                    "properties": {
                        "monitoringState": {
                            "$ref": "#/definitions/MonitoringState",
                            "description": "Specifies whether the port is actively monitored or discovered."
                        },
                        "displayName": {
                            "type": "string",
                            "description": "Name to use for display purposes."
                        },
                        "ipAddress": {
                            "type": "string",
                            "description": "IP address associated with the port. At present only IPv4 addresses are supported."
                        },
                        "portNumber": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Port number."
                        }
                    }
                }
            }
        },
        "Sku": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The SKU of the Search service. Valid values include: 'free': Shared service. 'basic': Dedicated service with up to 3 replicas. 'standard': Dedicated service with up to 12 partitions and 12 replicas. 'standard2': Similar to standard, but with more capacity per search unit. 'standard3': Offers maximum capacity per search unit with up to 12 partitions and 12 replicas (or up to 3 partitions with more indexes if you also set the hostingMode property to 'highDensity').",
                    "enum": [
                        "free",
                        "basic",
                        "standard",
                        "standard2",
                        "standard3"
                    ],
                    "x-ms-enum": {
                        "name": "SkuName",
                        "modelAsString": false
                    }
                }
            },
            "description": "Defines the SKU of an Azure Search Service, which determines price tier and capacity limits."
        },
        "SearchServiceProperties": {
            "properties": {
                "replicaCount": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 12,
                    "default": 1,
                    "description": "The number of replicas in the Search service. If specified, it must be a value between 1 and 12 inclusive for standard SKUs or between 1 and 3 inclusive for basic SKU."
                },
                "partitionCount": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 12,
                    "default": 1,
                    "description": "The number of partitions in the Search service; if specified, it can be 1, 2, 3, 4, 6, or 12. Values greater than 1 are only valid for standard SKUs. For 'standard3' services with hostingMode set to 'highDensity', the allowed values are between 1 and 3."
                },
                "hostingMode": {
                    "type": "string",
                    "default": "default",
                    "description": "Applicable only for the standard3 SKU. You can set this property to enable up to 3 high density partitions that allow up to 1000 indexes, which is much higher than the maximum indexes allowed for any other SKU. For the standard3 SKU, the value is either 'default' or 'highDensity'. For all other SKUs, this value must be 'default'.",
                    "enum": [
                        "default",
                        "highDensity"
                    ],
                    "x-ms-enum": {
                        "name": "HostingMode",
                        "modelAsString": false
                    }
                },
                "status": {
                    "readOnly": true,
                    "type": "string",
                    "description": "The status of the Search service. Possible values include: 'running': The Search service is running and no provisioning operations are underway. 'provisioning': The Search service is being provisioned or scaled up or down. 'deleting': The Search service is being deleted. 'degraded': The Search service is degraded. This can occur when the underlying search units are not healthy. The Search service is most likely operational, but performance might be slow and some requests might be dropped. 'disabled': The Search service is disabled. In this state, the service will reject all API requests. 'error': The Search service is in an error state. If your service is in the degraded, disabled, or error states, it means the Azure Search team is actively investigating the underlying issue. Dedicated services in these states are still chargeable based on the number of search units provisioned.",
                    "enum": [
                        "running",
                        "provisioning",
                        "deleting",
                        "degraded",
                        "disabled",
                        "error"
                    ],
                    "x-ms-enum": {
                        "name": "SearchServiceStatus",
                        "modelAsString": false
                    }
                },
                "statusDetails": {
                    "readOnly": true,
                    "type": "string",
                    "description": "The details of the Search service status."
                },
                "provisioningState": {
                    "readOnly": true,
                    "type": "string",
                    "description": "The state of the last provisioning operation performed on the Search service. Provisioning is an intermediate state that occurs while service capacity is being established. After capacity is set up, provisioningState changes to either 'succeeded' or 'failed'. Client applications can poll provisioning status (the recommended polling interval is from 30 seconds to one minute) by using the Get Search Service operation to see when an operation is completed. If you are using the free service, this value tends to come back as 'succeeded' directly in the call to Create Search service. This is because the free service uses capacity that is already set up.",
                    "enum": [
                        "succeeded",
                        "provisioning",
                        "failed"
                    ],
                    "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": false
                    }
                }
            },
            "description": "Properties of the Search service."
        },
        "Resource": {
            "properties": {
                "id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "The ID of the resource. This can be used with the Azure Resource Manager to link resources together.",
                    "externalDocs": {
                        "url": "https://aka.ms/search-linked-resources"
                    }
                },
                "name": {
                    "readOnly": true,
                    "type": "string",
                    "description": "The name of the resource.",
                    "externalDocs": {
                        "url": "https://aka.ms/search-naming-rules"
                    }
                },
                "type": {
                    "readOnly": true,
                    "type": "string",
                    "description": "The resource type."
                },
                "location": {
                    "type": "string",
                    "description": "The geographic location of the resource. This must be one of the supported and registered Azure Geo Regions (for example, West US, East US, Southeast Asia, and so forth).",
                    "externalDocs": {
                        "url": "https://aka.ms/search-rp-info"
                    },
                    "x-ms-mutability": [
                        "create",
                        "read"
                    ]
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags to help categorize the resource in the Azure portal."
                }
            },
            "required": [
                "location"
            ],
            "description": "Base type for all Azure resources.",
            "x-ms-azure-resource": true
        },
        "SearchService": {
            "properties": {
                "properties": {
                    "x-ms-client-flatten": true,
                    "$ref": "#/definitions/SearchServiceProperties",
                    "description": "Properties of the Search service."
                },
                "sku": {
                    "$ref": "#/definitions/Sku",
                    "description": "The SKU of the Search Service, which determines price tier and capacity limits.",
                    "externalDocs": {
                        "url": "https://azure.microsoft.com/documentation/articles/search-sku-tier/"
                    }
                }
            },
            "required": [
                "sku"
            ],
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                }
            ],
            "description": "Describes an Azure Search service and its current state."
        },
        "Error": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Error code"
                },
                "message": {
                    "type": "string",
                    "description": "Message"
                }
            }
        }
    },
    "parameters": {
        "SubscriptionIdParameter": {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "A unique identifier of a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call."
        },
        "ApiVersionParameter": {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The API version to be used with the HTTP request."
        },
        "GlobalParameter": {
            "name": "method-parameter",
            "in": "header",
            "required": false,
            "type": "string",
            "x-ms-parameter-grouping": {
                "name": "my-test.GrouP2"
            },
            "x-ms-parameter-location": "method"
        }
    }
}